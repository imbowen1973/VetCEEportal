// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  roles         String[] // Provider, Reviewer, AdminFull, AdminReadOnly
  status        String    @default("pending") // draft, pending, approved
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @db.ObjectId
  accounts       Account[]
  sessions       Session[]
  courses        Course[]
  auditLogs      AuditLog[]    @relation("UserAuditLogs")
  targetLogs     AuditLog[]    @relation("TargetAuditLogs")
  Framework      Framework[]
  Speaker        Speaker[]
}

model Organization {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  details   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users     User[]
  courses   Course[]
  Framework Framework[]
  Speaker   Speaker[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String? // For compatibility with NextAuth
  email      String
  token      String   @unique
  expires    DateTime
  status     String   @default("active") // active, used, expired
  role       String? // Provider, Reviewer, AdminFull, AdminReadOnly
  orgId      String?  @db.ObjectId // For team invitations
  createdAt  DateTime @default(now())

  @@unique([email, token])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  outcomes    String
  qa          String?
  pedagogy    String?
  policies    String?
  teacherBios String?
  courseType  String?
  deliveryType String?
  species     String?
  subject     String?
  frequency   String? // single or multiple
  language    String?
  summary     String?
  audience    String?
  locationType String?
  locationDetails String?
  prerequisites String?
  hoursLecture  Float?
  hoursPractical Float?
  hoursOnline   Float?
  ects          Float?
  cost          Float?
  status      CourseStatus @default(draft)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  user           User              @relation(fields: [userId], references: [id])
  userId         String            @db.ObjectId
  organization   Organization      @relation(fields: [organizationId], references: [id])
  organizationId String            @db.ObjectId
  sessions       CourseSession[]
  reviews        CourseReview[]
  frameworks     CourseFramework[]
}

enum CourseStatus {
  draft
  submitted
  awaiting_payment
  in_peer_review
  awaiting_feedback
  approved
  scheduling
  delivered
}

model Framework {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization   Organization?     @relation(fields: [organizationId], references: [id])
  organizationId String?           @db.ObjectId
  user           User              @relation(fields: [userId], references: [id])
  userId         String            @db.ObjectId
  courses        CourseFramework[]
}

model Speaker {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @db.ObjectId
  user           User          @relation(fields: [userId], references: [id])
  userId         String        @db.ObjectId
}

model CourseFramework {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String    @db.ObjectId
  framework   Framework @relation(fields: [frameworkId], references: [id], onDelete: Cascade)
  frameworkId String    @db.ObjectId
}

model CourseSession {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  teacher     String
  duration    Int // in minutes
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String @db.ObjectId
}

model CourseReview {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  status    String // approved, rejected
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String @db.ObjectId
}

model AuditLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  action    String
  details   String?
  createdAt DateTime @default(now())

  // Relations
  user     User    @relation("UserAuditLogs", fields: [userId], references: [id])
  userId   String  @db.ObjectId
  targetId String? @db.ObjectId
  target   User?   @relation("TargetAuditLogs", fields: [targetId], references: [id])
}
